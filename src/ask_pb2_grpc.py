# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import ask_pb2 as ask__pb2


class AskerStub(object):
    """The greeting service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Ask = channel.unary_unary(
                '/demo.Asker/Ask',
                request_serializer=ask__pb2.AskRequest.SerializeToString,
                response_deserializer=ask__pb2.AskReply.FromString,
                )
        self.AskStreamReply = channel.unary_stream(
                '/demo.Asker/AskStreamReply',
                request_serializer=ask__pb2.AskRequest.SerializeToString,
                response_deserializer=ask__pb2.AskReply.FromString,
                )
        self.AskBidiStream = channel.stream_stream(
                '/demo.Asker/AskBidiStream',
                request_serializer=ask__pb2.AskRequest.SerializeToString,
                response_deserializer=ask__pb2.AskReply.FromString,
                )


class AskerServicer(object):
    """The greeting service definition.
    """

    def Ask(self, request, context):
        """Sends a greeting
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        print("request: ", request)
        raise NotImplementedError('Method not implemented!11111')

    def AskStreamReply(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!22222')

    def AskBidiStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!33333')


def add_AskerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Ask': grpc.unary_unary_rpc_method_handler(
                    servicer.Ask,
                    request_deserializer=ask__pb2.AskRequest.FromString,
                    response_serializer=ask__pb2.AskReply.SerializeToString,
            ),
            'AskStreamReply': grpc.unary_stream_rpc_method_handler(
                    servicer.AskStreamReply,
                    request_deserializer=ask__pb2.AskRequest.FromString,
                    response_serializer=ask__pb2.AskReply.SerializeToString,
            ),
            'AskBidiStream': grpc.stream_stream_rpc_method_handler(
                    servicer.AskBidiStream,
                    request_deserializer=ask__pb2.AskRequest.FromString,
                    response_serializer=ask__pb2.AskReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'demo.Asker', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Asker(object):
    """The greeting service definition.
    """

    @staticmethod
    def Ask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/demo.Asker/Ask',
            ask__pb2.AskRequest.SerializeToString,
            ask__pb2.AskReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AskStreamReply(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/demo.Asker/AskStreamReply',
            ask__pb2.AskRequest.SerializeToString,
            ask__pb2.AskReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AskBidiStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/demo.Asker/AskBidiStream',
            ask__pb2.AskRequest.SerializeToString,
            ask__pb2.AskReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
